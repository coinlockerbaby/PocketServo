var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"theta_gen","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"F:\\Develop\\STM32\\PocketServo\\05_Software\\Dengfoc\\1_VF\\matlab\\codegen\\theta_gen_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'theta_gen'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb  7 13:23:39 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"theta_gen.h\"                 /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n    static bool OverrunFlag = false;\r\n\r\n    /* Disable interrupts here */\r\n\r\n    /* Check for overrun */\r\n    if (OverrunFlag)\r\n    {\r\n        return;\r\n    }\r\n\r\n    OverrunFlag = true;\r\n\r\n    /* Save FPU context here (if necessary) */\r\n    /* Re-enable timer or interrupt here */\r\n    /* Set model inputs here */\r\n\r\n    /* Step the model */\r\n    theta_gen_step();\r\n\r\n    /* Get model outputs here */\r\n\r\n    /* Indicate task complete */\r\n    OverrunFlag = false;\r\n\r\n    /* Disable interrupts here */\r\n    /* Restore FPU context here (if necessary) */\r\n    /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint main(int argc, const char *argv[])\r\n{\r\n    /* Unused arguments */\r\n    (void)(argc);\r\n    (void)(argv);\r\n\r\n    /* Initialize model */\r\n    theta_gen_initialize();\r\n\r\n    /* Attach rt_OneStep to a timer or interrupt service routine with\r\n     * period 1.0E-5 seconds (base rate of the model) here.\r\n     * The call syntax for rt_OneStep is\r\n     *\r\n     *  rt_OneStep();\r\n     */\r\n    printf(\"Warning: The simulation will run forever. \"\r\n           \"Generated ERT main won't simulate model step behavior. \"\r\n           \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n    fflush((NULL));\r\n    while (1)\r\n    {\r\n        /*  Perform application tasks here */\r\n    }\r\n\r\n    /* The option 'Remove error status field in real-time model data structure'\r\n     * is selected, therefore the following code does not need to execute.\r\n     */\r\n    return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"theta_gen.c","type":"source","group":"model","path":"F:\\Develop\\STM32\\PocketServo\\05_Software\\Dengfoc\\1_VF\\matlab\\codegen\\theta_gen_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: theta_gen.c\r\n *\r\n * Code generated for Simulink model 'theta_gen'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb  7 13:23:39 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"theta_gen.h\"\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Model step function */\r\nvoid theta_gen_step(void)\r\n{\r\n    /* MATLAB Function: '<Root>/mod2pi_fun' incorporates:\r\n     *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\r\n     */\r\n    rtY.theta = rtDW.DiscreteTimeIntegrator_DSTATE;\r\n    while (rtY.theta < 0.0F)\r\n    {\r\n        rtY.theta += 6.28318548F;\r\n    }\r\n\r\n    while (rtY.theta >= 6.28318548F)\r\n    {\r\n        rtY.theta -= 6.28318548F;\r\n    }\r\n\r\n    /* End of MATLAB Function: '<Root>/mod2pi_fun' */\r\n\r\n    /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:\r\n     *  Gain: '<Root>/Gain'\r\n     *  Inport: '<Root>/freq'\r\n     */\r\n    rtDW.DiscreteTimeIntegrator_DSTATE += 6.28318548F * rtU.freq * 1.0E-5F;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid theta_gen_initialize(void)\r\n{\r\n    /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"theta_gen.h","type":"header","group":"model","path":"F:\\Develop\\STM32\\PocketServo\\05_Software\\Dengfoc\\1_VF\\matlab\\codegen\\theta_gen_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * File: theta_gen.h\r\n *\r\n * Code generated for Simulink model 'theta_gen'.\r\n *\r\n * Model version                  : 1.16\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Feb  7 13:23:39 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. Traceability\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_theta_gen_h_\r\n#define RTW_HEADER_theta_gen_h_\r\n#ifndef theta_gen_COMMON_INCLUDES_\r\n#define theta_gen_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#endif                                 /* theta_gen_COMMON_INCLUDES_ */\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct\r\n{\r\n    float DiscreteTimeIntegrator_DSTATE;/* '<Root>/Discrete-Time Integrator' */\r\n}\r\nDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct\r\n{\r\n    float freq;                        /* '<Root>/freq' */\r\n}\r\nExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct\r\n{\r\n    float theta;                       /* '<Root>/theta' */\r\n}\r\nExtY;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void theta_gen_initialize(void);\r\nextern void theta_gen_step(void);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<Root>/Data Type Conversion' : Eliminate redundant data type conversion\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'theta_gen'\r\n * '<S1>'   : 'theta_gen/mod2pi_fun'\r\n */\r\n\r\n/*-\r\n * Requirements for '<Root>': theta_gen\r\n\r\n */\r\n#endif                                 /* RTW_HEADER_theta_gen_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};